package build.bazel.remote.execution.v2;

import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;

/**
 * <pre>
 * The CAS (content-addressable storage) is used to store the inputs to and
 * outputs from the execution service. Each piece of content is addressed by the
 * digest of its binary data.
 * Most of the binary data stored in the CAS is opaque to the execution engine,
 * and is only used as a communication medium. In order to build an
 * [Action][build.bazel.remote.execution.v2.Action],
 * however, the client will need to also upload the
 * [Command][build.bazel.remote.execution.v2.Command] and input root
 * [Directory][build.bazel.remote.execution.v2.Directory] for the Action.
 * The Command and Directory messages must be marshalled to wire format and then
 * uploaded under the hash as with any other piece of content. In practice, the
 * input root directory is likely to refer to other Directories in its
 * hierarchy, which must also each be uploaded on their own.
 * For small file uploads the client should group them together and call
 * [BatchUpdateBlobs][build.bazel.remote.execution.v2.ContentAddressableStorage.BatchUpdateBlobs].
 * For large uploads, the client must use the
 * [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
 * `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
 * where `instance_name` is as described in the next paragraph, `uuid` is a
 * version 4 UUID generated by the client, and `hash` and `size` are the
 * [Digest][build.bazel.remote.execution.v2.Digest] of the blob. The
 * `uuid` is used only to avoid collisions when multiple clients try to upload
 * the same file (or the same client tries to upload the file multiple times at
 * once on different threads), so the client MAY reuse the `uuid` for uploading
 * different blobs. The `resource_name` may optionally have a trailing filename
 * (or other metadata) for a client to use if it is storing URLs, as in
 * `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
 * after the `size` is ignored.
 * A single server MAY support multiple instances of the execution system, each
 * with their own workers, storage, cache, etc. The exact relationship between
 * instances is up to the server. If the server does, then the `instance_name`
 * is an identifier, possibly containing multiple path segments, used to
 * distinguish between the various instances on the server, in a manner defined
 * by the server. For servers which do not support multiple instances, then the
 * `instance_name` is the empty path and the leading slash is omitted, so that
 * the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.
 * To simplify parsing, a path segment cannot equal any of the following
 * keywords: `blobs`, `uploads`, `actions`, `actionResults`, `operations` and
 * `capabilities`.
 * When attempting an upload, if another client has already completed the upload
 * (which may occur in the middle of a single upload if another client uploads
 * the same blob concurrently), the request will terminate immediately with
 * a response whose `committed_size` is the full size of the uploaded file
 * (regardless of how much data was transmitted by the client). If the client
 * completes the upload but the
 * [Digest][build.bazel.remote.execution.v2.Digest] does not match, an
 * `INVALID_ARGUMENT` error will be returned. In either case, the client should
 * not attempt to retry the upload.
 * For downloading blobs, the client must use the
 * [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
 * a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
 * `instance_name` is the instance name (see above), and `hash` and `size` are
 * the [Digest][build.bazel.remote.execution.v2.Digest] of the blob.
 * The lifetime of entries in the CAS is implementation specific, but it SHOULD
 * be long enough to allow for newly-added and recently looked-up entries to be
 * used in subsequent calls (e.g. to
 * [Execute][build.bazel.remote.execution.v2.Execution.Execute]).
 * As with other services in the Remote Execution API, any call may return an
 * error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
 * information about when the client should retry the request; clients SHOULD
 * respect the information provided.
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.0.1)",
    comments = "Source: remote_execution.proto")
public class ContentAddressableStorageGrpc {

  private ContentAddressableStorageGrpc() {}

  public static final String SERVICE_NAME = "build.bazel.remote.execution.v2.ContentAddressableStorage";

  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<build.bazel.remote.execution.v2.FindMissingBlobsRequest,
      build.bazel.remote.execution.v2.FindMissingBlobsResponse> METHOD_FIND_MISSING_BLOBS =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.UNARY,
          generateFullMethodName(
              "build.bazel.remote.execution.v2.ContentAddressableStorage", "FindMissingBlobs"),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.FindMissingBlobsRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.FindMissingBlobsResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<build.bazel.remote.execution.v2.BatchUpdateBlobsRequest,
      build.bazel.remote.execution.v2.BatchUpdateBlobsResponse> METHOD_BATCH_UPDATE_BLOBS =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.UNARY,
          generateFullMethodName(
              "build.bazel.remote.execution.v2.ContentAddressableStorage", "BatchUpdateBlobs"),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<build.bazel.remote.execution.v2.BatchReadBlobsRequest,
      build.bazel.remote.execution.v2.BatchReadBlobsResponse> METHOD_BATCH_READ_BLOBS =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.UNARY,
          generateFullMethodName(
              "build.bazel.remote.execution.v2.ContentAddressableStorage", "BatchReadBlobs"),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.BatchReadBlobsRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.BatchReadBlobsResponse.getDefaultInstance()));
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static final io.grpc.MethodDescriptor<build.bazel.remote.execution.v2.GetTreeRequest,
      build.bazel.remote.execution.v2.GetTreeResponse> METHOD_GET_TREE =
      io.grpc.MethodDescriptor.create(
          io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING,
          generateFullMethodName(
              "build.bazel.remote.execution.v2.ContentAddressableStorage", "GetTree"),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.GetTreeRequest.getDefaultInstance()),
          io.grpc.protobuf.ProtoUtils.marshaller(build.bazel.remote.execution.v2.GetTreeResponse.getDefaultInstance()));

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static ContentAddressableStorageStub newStub(io.grpc.Channel channel) {
    return new ContentAddressableStorageStub(channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static ContentAddressableStorageBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new ContentAddressableStorageBlockingStub(channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary and streaming output calls on the service
   */
  public static ContentAddressableStorageFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new ContentAddressableStorageFutureStub(channel);
  }

  /**
   * <pre>
   * The CAS (content-addressable storage) is used to store the inputs to and
   * outputs from the execution service. Each piece of content is addressed by the
   * digest of its binary data.
   * Most of the binary data stored in the CAS is opaque to the execution engine,
   * and is only used as a communication medium. In order to build an
   * [Action][build.bazel.remote.execution.v2.Action],
   * however, the client will need to also upload the
   * [Command][build.bazel.remote.execution.v2.Command] and input root
   * [Directory][build.bazel.remote.execution.v2.Directory] for the Action.
   * The Command and Directory messages must be marshalled to wire format and then
   * uploaded under the hash as with any other piece of content. In practice, the
   * input root directory is likely to refer to other Directories in its
   * hierarchy, which must also each be uploaded on their own.
   * For small file uploads the client should group them together and call
   * [BatchUpdateBlobs][build.bazel.remote.execution.v2.ContentAddressableStorage.BatchUpdateBlobs].
   * For large uploads, the client must use the
   * [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
   * `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
   * where `instance_name` is as described in the next paragraph, `uuid` is a
   * version 4 UUID generated by the client, and `hash` and `size` are the
   * [Digest][build.bazel.remote.execution.v2.Digest] of the blob. The
   * `uuid` is used only to avoid collisions when multiple clients try to upload
   * the same file (or the same client tries to upload the file multiple times at
   * once on different threads), so the client MAY reuse the `uuid` for uploading
   * different blobs. The `resource_name` may optionally have a trailing filename
   * (or other metadata) for a client to use if it is storing URLs, as in
   * `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
   * after the `size` is ignored.
   * A single server MAY support multiple instances of the execution system, each
   * with their own workers, storage, cache, etc. The exact relationship between
   * instances is up to the server. If the server does, then the `instance_name`
   * is an identifier, possibly containing multiple path segments, used to
   * distinguish between the various instances on the server, in a manner defined
   * by the server. For servers which do not support multiple instances, then the
   * `instance_name` is the empty path and the leading slash is omitted, so that
   * the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.
   * To simplify parsing, a path segment cannot equal any of the following
   * keywords: `blobs`, `uploads`, `actions`, `actionResults`, `operations` and
   * `capabilities`.
   * When attempting an upload, if another client has already completed the upload
   * (which may occur in the middle of a single upload if another client uploads
   * the same blob concurrently), the request will terminate immediately with
   * a response whose `committed_size` is the full size of the uploaded file
   * (regardless of how much data was transmitted by the client). If the client
   * completes the upload but the
   * [Digest][build.bazel.remote.execution.v2.Digest] does not match, an
   * `INVALID_ARGUMENT` error will be returned. In either case, the client should
   * not attempt to retry the upload.
   * For downloading blobs, the client must use the
   * [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
   * a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
   * `instance_name` is the instance name (see above), and `hash` and `size` are
   * the [Digest][build.bazel.remote.execution.v2.Digest] of the blob.
   * The lifetime of entries in the CAS is implementation specific, but it SHOULD
   * be long enough to allow for newly-added and recently looked-up entries to be
   * used in subsequent calls (e.g. to
   * [Execute][build.bazel.remote.execution.v2.Execution.Execute]).
   * As with other services in the Remote Execution API, any call may return an
   * error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
   * information about when the client should retry the request; clients SHOULD
   * respect the information provided.
   * </pre>
   */
  public static abstract class ContentAddressableStorageImplBase implements io.grpc.BindableService {

    /**
     * <pre>
     * Determine if blobs are present in the CAS.
     * Clients can use this API before uploading blobs to determine which ones are
     * already present in the CAS and do not need to be uploaded again.
     * Servers SHOULD increase the TTLs of the referenced blobs if necessary and
     * applicable.
     * There are no method-specific errors.
     * </pre>
     */
    public void findMissingBlobs(build.bazel.remote.execution.v2.FindMissingBlobsRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.FindMissingBlobsResponse> responseObserver) {
      asyncUnimplementedUnaryCall(METHOD_FIND_MISSING_BLOBS, responseObserver);
    }

    /**
     * <pre>
     * Upload many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be uploaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or uploaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Write` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to upload more than the
     *   server supported limit.
     * Individual requests may return the following errors, additionally:
     * * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
     * * `INVALID_ARGUMENT`: The
     * [Digest][build.bazel.remote.execution.v2.Digest] does not match the
     * provided data.
     * </pre>
     */
    public void batchUpdateBlobs(build.bazel.remote.execution.v2.BatchUpdateBlobsRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.BatchUpdateBlobsResponse> responseObserver) {
      asyncUnimplementedUnaryCall(METHOD_BATCH_UPDATE_BLOBS, responseObserver);
    }

    /**
     * <pre>
     * Download many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be downloaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or downloaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Read` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to read more than the
     *   server supported limit.
     * Every error on individual read will be returned in the corresponding digest
     * status.
     * </pre>
     */
    public void batchReadBlobs(build.bazel.remote.execution.v2.BatchReadBlobsRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.BatchReadBlobsResponse> responseObserver) {
      asyncUnimplementedUnaryCall(METHOD_BATCH_READ_BLOBS, responseObserver);
    }

    /**
     * <pre>
     * Fetch the entire directory tree rooted at a node.
     * This request must be targeted at a
     * [Directory][build.bazel.remote.execution.v2.Directory] stored in the
     * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage]
     * (CAS). The server will enumerate the `Directory` tree recursively and
     * return every node descended from the root.
     * The GetTreeRequest.page_token parameter can be used to skip ahead in
     * the stream (e.g. when retrying a partially completed and aborted request),
     * by setting it to a value taken from GetTreeResponse.next_page_token of the
     * last successfully processed GetTreeResponse).
     * The exact traversal order is unspecified and, unless retrieving subsequent
     * pages from an earlier request, is not guaranteed to be stable across
     * multiple invocations of `GetTree`.
     * If part of the tree is missing from the CAS, the server will return the
     * portion present and omit the rest.
     * Errors:
     * * `NOT_FOUND`: The requested tree root is not present in the CAS.
     * </pre>
     */
    public void getTree(build.bazel.remote.execution.v2.GetTreeRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.GetTreeResponse> responseObserver) {
      asyncUnimplementedUnaryCall(METHOD_GET_TREE, responseObserver);
    }

    @java.lang.Override public io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            METHOD_FIND_MISSING_BLOBS,
            asyncUnaryCall(
              new MethodHandlers<
                build.bazel.remote.execution.v2.FindMissingBlobsRequest,
                build.bazel.remote.execution.v2.FindMissingBlobsResponse>(
                  this, METHODID_FIND_MISSING_BLOBS)))
          .addMethod(
            METHOD_BATCH_UPDATE_BLOBS,
            asyncUnaryCall(
              new MethodHandlers<
                build.bazel.remote.execution.v2.BatchUpdateBlobsRequest,
                build.bazel.remote.execution.v2.BatchUpdateBlobsResponse>(
                  this, METHODID_BATCH_UPDATE_BLOBS)))
          .addMethod(
            METHOD_BATCH_READ_BLOBS,
            asyncUnaryCall(
              new MethodHandlers<
                build.bazel.remote.execution.v2.BatchReadBlobsRequest,
                build.bazel.remote.execution.v2.BatchReadBlobsResponse>(
                  this, METHODID_BATCH_READ_BLOBS)))
          .addMethod(
            METHOD_GET_TREE,
            asyncServerStreamingCall(
              new MethodHandlers<
                build.bazel.remote.execution.v2.GetTreeRequest,
                build.bazel.remote.execution.v2.GetTreeResponse>(
                  this, METHODID_GET_TREE)))
          .build();
    }
  }

  /**
   * <pre>
   * The CAS (content-addressable storage) is used to store the inputs to and
   * outputs from the execution service. Each piece of content is addressed by the
   * digest of its binary data.
   * Most of the binary data stored in the CAS is opaque to the execution engine,
   * and is only used as a communication medium. In order to build an
   * [Action][build.bazel.remote.execution.v2.Action],
   * however, the client will need to also upload the
   * [Command][build.bazel.remote.execution.v2.Command] and input root
   * [Directory][build.bazel.remote.execution.v2.Directory] for the Action.
   * The Command and Directory messages must be marshalled to wire format and then
   * uploaded under the hash as with any other piece of content. In practice, the
   * input root directory is likely to refer to other Directories in its
   * hierarchy, which must also each be uploaded on their own.
   * For small file uploads the client should group them together and call
   * [BatchUpdateBlobs][build.bazel.remote.execution.v2.ContentAddressableStorage.BatchUpdateBlobs].
   * For large uploads, the client must use the
   * [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
   * `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
   * where `instance_name` is as described in the next paragraph, `uuid` is a
   * version 4 UUID generated by the client, and `hash` and `size` are the
   * [Digest][build.bazel.remote.execution.v2.Digest] of the blob. The
   * `uuid` is used only to avoid collisions when multiple clients try to upload
   * the same file (or the same client tries to upload the file multiple times at
   * once on different threads), so the client MAY reuse the `uuid` for uploading
   * different blobs. The `resource_name` may optionally have a trailing filename
   * (or other metadata) for a client to use if it is storing URLs, as in
   * `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
   * after the `size` is ignored.
   * A single server MAY support multiple instances of the execution system, each
   * with their own workers, storage, cache, etc. The exact relationship between
   * instances is up to the server. If the server does, then the `instance_name`
   * is an identifier, possibly containing multiple path segments, used to
   * distinguish between the various instances on the server, in a manner defined
   * by the server. For servers which do not support multiple instances, then the
   * `instance_name` is the empty path and the leading slash is omitted, so that
   * the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.
   * To simplify parsing, a path segment cannot equal any of the following
   * keywords: `blobs`, `uploads`, `actions`, `actionResults`, `operations` and
   * `capabilities`.
   * When attempting an upload, if another client has already completed the upload
   * (which may occur in the middle of a single upload if another client uploads
   * the same blob concurrently), the request will terminate immediately with
   * a response whose `committed_size` is the full size of the uploaded file
   * (regardless of how much data was transmitted by the client). If the client
   * completes the upload but the
   * [Digest][build.bazel.remote.execution.v2.Digest] does not match, an
   * `INVALID_ARGUMENT` error will be returned. In either case, the client should
   * not attempt to retry the upload.
   * For downloading blobs, the client must use the
   * [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
   * a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
   * `instance_name` is the instance name (see above), and `hash` and `size` are
   * the [Digest][build.bazel.remote.execution.v2.Digest] of the blob.
   * The lifetime of entries in the CAS is implementation specific, but it SHOULD
   * be long enough to allow for newly-added and recently looked-up entries to be
   * used in subsequent calls (e.g. to
   * [Execute][build.bazel.remote.execution.v2.Execution.Execute]).
   * As with other services in the Remote Execution API, any call may return an
   * error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
   * information about when the client should retry the request; clients SHOULD
   * respect the information provided.
   * </pre>
   */
  public static final class ContentAddressableStorageStub extends io.grpc.stub.AbstractStub<ContentAddressableStorageStub> {
    private ContentAddressableStorageStub(io.grpc.Channel channel) {
      super(channel);
    }

    private ContentAddressableStorageStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected ContentAddressableStorageStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ContentAddressableStorageStub(channel, callOptions);
    }

    /**
     * <pre>
     * Determine if blobs are present in the CAS.
     * Clients can use this API before uploading blobs to determine which ones are
     * already present in the CAS and do not need to be uploaded again.
     * Servers SHOULD increase the TTLs of the referenced blobs if necessary and
     * applicable.
     * There are no method-specific errors.
     * </pre>
     */
    public void findMissingBlobs(build.bazel.remote.execution.v2.FindMissingBlobsRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.FindMissingBlobsResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(METHOD_FIND_MISSING_BLOBS, getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Upload many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be uploaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or uploaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Write` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to upload more than the
     *   server supported limit.
     * Individual requests may return the following errors, additionally:
     * * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
     * * `INVALID_ARGUMENT`: The
     * [Digest][build.bazel.remote.execution.v2.Digest] does not match the
     * provided data.
     * </pre>
     */
    public void batchUpdateBlobs(build.bazel.remote.execution.v2.BatchUpdateBlobsRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.BatchUpdateBlobsResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(METHOD_BATCH_UPDATE_BLOBS, getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Download many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be downloaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or downloaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Read` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to read more than the
     *   server supported limit.
     * Every error on individual read will be returned in the corresponding digest
     * status.
     * </pre>
     */
    public void batchReadBlobs(build.bazel.remote.execution.v2.BatchReadBlobsRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.BatchReadBlobsResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(METHOD_BATCH_READ_BLOBS, getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Fetch the entire directory tree rooted at a node.
     * This request must be targeted at a
     * [Directory][build.bazel.remote.execution.v2.Directory] stored in the
     * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage]
     * (CAS). The server will enumerate the `Directory` tree recursively and
     * return every node descended from the root.
     * The GetTreeRequest.page_token parameter can be used to skip ahead in
     * the stream (e.g. when retrying a partially completed and aborted request),
     * by setting it to a value taken from GetTreeResponse.next_page_token of the
     * last successfully processed GetTreeResponse).
     * The exact traversal order is unspecified and, unless retrieving subsequent
     * pages from an earlier request, is not guaranteed to be stable across
     * multiple invocations of `GetTree`.
     * If part of the tree is missing from the CAS, the server will return the
     * portion present and omit the rest.
     * Errors:
     * * `NOT_FOUND`: The requested tree root is not present in the CAS.
     * </pre>
     */
    public void getTree(build.bazel.remote.execution.v2.GetTreeRequest request,
        io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.GetTreeResponse> responseObserver) {
      asyncServerStreamingCall(
          getChannel().newCall(METHOD_GET_TREE, getCallOptions()), request, responseObserver);
    }
  }

  /**
   * <pre>
   * The CAS (content-addressable storage) is used to store the inputs to and
   * outputs from the execution service. Each piece of content is addressed by the
   * digest of its binary data.
   * Most of the binary data stored in the CAS is opaque to the execution engine,
   * and is only used as a communication medium. In order to build an
   * [Action][build.bazel.remote.execution.v2.Action],
   * however, the client will need to also upload the
   * [Command][build.bazel.remote.execution.v2.Command] and input root
   * [Directory][build.bazel.remote.execution.v2.Directory] for the Action.
   * The Command and Directory messages must be marshalled to wire format and then
   * uploaded under the hash as with any other piece of content. In practice, the
   * input root directory is likely to refer to other Directories in its
   * hierarchy, which must also each be uploaded on their own.
   * For small file uploads the client should group them together and call
   * [BatchUpdateBlobs][build.bazel.remote.execution.v2.ContentAddressableStorage.BatchUpdateBlobs].
   * For large uploads, the client must use the
   * [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
   * `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
   * where `instance_name` is as described in the next paragraph, `uuid` is a
   * version 4 UUID generated by the client, and `hash` and `size` are the
   * [Digest][build.bazel.remote.execution.v2.Digest] of the blob. The
   * `uuid` is used only to avoid collisions when multiple clients try to upload
   * the same file (or the same client tries to upload the file multiple times at
   * once on different threads), so the client MAY reuse the `uuid` for uploading
   * different blobs. The `resource_name` may optionally have a trailing filename
   * (or other metadata) for a client to use if it is storing URLs, as in
   * `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
   * after the `size` is ignored.
   * A single server MAY support multiple instances of the execution system, each
   * with their own workers, storage, cache, etc. The exact relationship between
   * instances is up to the server. If the server does, then the `instance_name`
   * is an identifier, possibly containing multiple path segments, used to
   * distinguish between the various instances on the server, in a manner defined
   * by the server. For servers which do not support multiple instances, then the
   * `instance_name` is the empty path and the leading slash is omitted, so that
   * the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.
   * To simplify parsing, a path segment cannot equal any of the following
   * keywords: `blobs`, `uploads`, `actions`, `actionResults`, `operations` and
   * `capabilities`.
   * When attempting an upload, if another client has already completed the upload
   * (which may occur in the middle of a single upload if another client uploads
   * the same blob concurrently), the request will terminate immediately with
   * a response whose `committed_size` is the full size of the uploaded file
   * (regardless of how much data was transmitted by the client). If the client
   * completes the upload but the
   * [Digest][build.bazel.remote.execution.v2.Digest] does not match, an
   * `INVALID_ARGUMENT` error will be returned. In either case, the client should
   * not attempt to retry the upload.
   * For downloading blobs, the client must use the
   * [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
   * a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
   * `instance_name` is the instance name (see above), and `hash` and `size` are
   * the [Digest][build.bazel.remote.execution.v2.Digest] of the blob.
   * The lifetime of entries in the CAS is implementation specific, but it SHOULD
   * be long enough to allow for newly-added and recently looked-up entries to be
   * used in subsequent calls (e.g. to
   * [Execute][build.bazel.remote.execution.v2.Execution.Execute]).
   * As with other services in the Remote Execution API, any call may return an
   * error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
   * information about when the client should retry the request; clients SHOULD
   * respect the information provided.
   * </pre>
   */
  public static final class ContentAddressableStorageBlockingStub extends io.grpc.stub.AbstractStub<ContentAddressableStorageBlockingStub> {
    private ContentAddressableStorageBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }

    private ContentAddressableStorageBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected ContentAddressableStorageBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ContentAddressableStorageBlockingStub(channel, callOptions);
    }

    /**
     * <pre>
     * Determine if blobs are present in the CAS.
     * Clients can use this API before uploading blobs to determine which ones are
     * already present in the CAS and do not need to be uploaded again.
     * Servers SHOULD increase the TTLs of the referenced blobs if necessary and
     * applicable.
     * There are no method-specific errors.
     * </pre>
     */
    public build.bazel.remote.execution.v2.FindMissingBlobsResponse findMissingBlobs(build.bazel.remote.execution.v2.FindMissingBlobsRequest request) {
      return blockingUnaryCall(
          getChannel(), METHOD_FIND_MISSING_BLOBS, getCallOptions(), request);
    }

    /**
     * <pre>
     * Upload many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be uploaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or uploaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Write` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to upload more than the
     *   server supported limit.
     * Individual requests may return the following errors, additionally:
     * * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
     * * `INVALID_ARGUMENT`: The
     * [Digest][build.bazel.remote.execution.v2.Digest] does not match the
     * provided data.
     * </pre>
     */
    public build.bazel.remote.execution.v2.BatchUpdateBlobsResponse batchUpdateBlobs(build.bazel.remote.execution.v2.BatchUpdateBlobsRequest request) {
      return blockingUnaryCall(
          getChannel(), METHOD_BATCH_UPDATE_BLOBS, getCallOptions(), request);
    }

    /**
     * <pre>
     * Download many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be downloaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or downloaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Read` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to read more than the
     *   server supported limit.
     * Every error on individual read will be returned in the corresponding digest
     * status.
     * </pre>
     */
    public build.bazel.remote.execution.v2.BatchReadBlobsResponse batchReadBlobs(build.bazel.remote.execution.v2.BatchReadBlobsRequest request) {
      return blockingUnaryCall(
          getChannel(), METHOD_BATCH_READ_BLOBS, getCallOptions(), request);
    }

    /**
     * <pre>
     * Fetch the entire directory tree rooted at a node.
     * This request must be targeted at a
     * [Directory][build.bazel.remote.execution.v2.Directory] stored in the
     * [ContentAddressableStorage][build.bazel.remote.execution.v2.ContentAddressableStorage]
     * (CAS). The server will enumerate the `Directory` tree recursively and
     * return every node descended from the root.
     * The GetTreeRequest.page_token parameter can be used to skip ahead in
     * the stream (e.g. when retrying a partially completed and aborted request),
     * by setting it to a value taken from GetTreeResponse.next_page_token of the
     * last successfully processed GetTreeResponse).
     * The exact traversal order is unspecified and, unless retrieving subsequent
     * pages from an earlier request, is not guaranteed to be stable across
     * multiple invocations of `GetTree`.
     * If part of the tree is missing from the CAS, the server will return the
     * portion present and omit the rest.
     * Errors:
     * * `NOT_FOUND`: The requested tree root is not present in the CAS.
     * </pre>
     */
    public java.util.Iterator<build.bazel.remote.execution.v2.GetTreeResponse> getTree(
        build.bazel.remote.execution.v2.GetTreeRequest request) {
      return blockingServerStreamingCall(
          getChannel(), METHOD_GET_TREE, getCallOptions(), request);
    }
  }

  /**
   * <pre>
   * The CAS (content-addressable storage) is used to store the inputs to and
   * outputs from the execution service. Each piece of content is addressed by the
   * digest of its binary data.
   * Most of the binary data stored in the CAS is opaque to the execution engine,
   * and is only used as a communication medium. In order to build an
   * [Action][build.bazel.remote.execution.v2.Action],
   * however, the client will need to also upload the
   * [Command][build.bazel.remote.execution.v2.Command] and input root
   * [Directory][build.bazel.remote.execution.v2.Directory] for the Action.
   * The Command and Directory messages must be marshalled to wire format and then
   * uploaded under the hash as with any other piece of content. In practice, the
   * input root directory is likely to refer to other Directories in its
   * hierarchy, which must also each be uploaded on their own.
   * For small file uploads the client should group them together and call
   * [BatchUpdateBlobs][build.bazel.remote.execution.v2.ContentAddressableStorage.BatchUpdateBlobs].
   * For large uploads, the client must use the
   * [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
   * `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
   * where `instance_name` is as described in the next paragraph, `uuid` is a
   * version 4 UUID generated by the client, and `hash` and `size` are the
   * [Digest][build.bazel.remote.execution.v2.Digest] of the blob. The
   * `uuid` is used only to avoid collisions when multiple clients try to upload
   * the same file (or the same client tries to upload the file multiple times at
   * once on different threads), so the client MAY reuse the `uuid` for uploading
   * different blobs. The `resource_name` may optionally have a trailing filename
   * (or other metadata) for a client to use if it is storing URLs, as in
   * `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
   * after the `size` is ignored.
   * A single server MAY support multiple instances of the execution system, each
   * with their own workers, storage, cache, etc. The exact relationship between
   * instances is up to the server. If the server does, then the `instance_name`
   * is an identifier, possibly containing multiple path segments, used to
   * distinguish between the various instances on the server, in a manner defined
   * by the server. For servers which do not support multiple instances, then the
   * `instance_name` is the empty path and the leading slash is omitted, so that
   * the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.
   * To simplify parsing, a path segment cannot equal any of the following
   * keywords: `blobs`, `uploads`, `actions`, `actionResults`, `operations` and
   * `capabilities`.
   * When attempting an upload, if another client has already completed the upload
   * (which may occur in the middle of a single upload if another client uploads
   * the same blob concurrently), the request will terminate immediately with
   * a response whose `committed_size` is the full size of the uploaded file
   * (regardless of how much data was transmitted by the client). If the client
   * completes the upload but the
   * [Digest][build.bazel.remote.execution.v2.Digest] does not match, an
   * `INVALID_ARGUMENT` error will be returned. In either case, the client should
   * not attempt to retry the upload.
   * For downloading blobs, the client must use the
   * [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
   * a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
   * `instance_name` is the instance name (see above), and `hash` and `size` are
   * the [Digest][build.bazel.remote.execution.v2.Digest] of the blob.
   * The lifetime of entries in the CAS is implementation specific, but it SHOULD
   * be long enough to allow for newly-added and recently looked-up entries to be
   * used in subsequent calls (e.g. to
   * [Execute][build.bazel.remote.execution.v2.Execution.Execute]).
   * As with other services in the Remote Execution API, any call may return an
   * error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
   * information about when the client should retry the request; clients SHOULD
   * respect the information provided.
   * </pre>
   */
  public static final class ContentAddressableStorageFutureStub extends io.grpc.stub.AbstractStub<ContentAddressableStorageFutureStub> {
    private ContentAddressableStorageFutureStub(io.grpc.Channel channel) {
      super(channel);
    }

    private ContentAddressableStorageFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected ContentAddressableStorageFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new ContentAddressableStorageFutureStub(channel, callOptions);
    }

    /**
     * <pre>
     * Determine if blobs are present in the CAS.
     * Clients can use this API before uploading blobs to determine which ones are
     * already present in the CAS and do not need to be uploaded again.
     * Servers SHOULD increase the TTLs of the referenced blobs if necessary and
     * applicable.
     * There are no method-specific errors.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<build.bazel.remote.execution.v2.FindMissingBlobsResponse> findMissingBlobs(
        build.bazel.remote.execution.v2.FindMissingBlobsRequest request) {
      return futureUnaryCall(
          getChannel().newCall(METHOD_FIND_MISSING_BLOBS, getCallOptions()), request);
    }

    /**
     * <pre>
     * Upload many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be uploaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or uploaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Write` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to upload more than the
     *   server supported limit.
     * Individual requests may return the following errors, additionally:
     * * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
     * * `INVALID_ARGUMENT`: The
     * [Digest][build.bazel.remote.execution.v2.Digest] does not match the
     * provided data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<build.bazel.remote.execution.v2.BatchUpdateBlobsResponse> batchUpdateBlobs(
        build.bazel.remote.execution.v2.BatchUpdateBlobsRequest request) {
      return futureUnaryCall(
          getChannel().newCall(METHOD_BATCH_UPDATE_BLOBS, getCallOptions()), request);
    }

    /**
     * <pre>
     * Download many blobs at once.
     * The server may enforce a limit of the combined total size of blobs
     * to be downloaded using this API. This limit may be obtained using the
     * [Capabilities][build.bazel.remote.execution.v2.Capabilities] API.
     * Requests exceeding the limit should either be split into smaller
     * chunks or downloaded using the
     * [ByteStream API][google.bytestream.ByteStream], as appropriate.
     * This request is equivalent to calling a Bytestream `Read` request
     * on each individual blob, in parallel. The requests may succeed or fail
     * independently.
     * Errors:
     * * `INVALID_ARGUMENT`: The client attempted to read more than the
     *   server supported limit.
     * Every error on individual read will be returned in the corresponding digest
     * status.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<build.bazel.remote.execution.v2.BatchReadBlobsResponse> batchReadBlobs(
        build.bazel.remote.execution.v2.BatchReadBlobsRequest request) {
      return futureUnaryCall(
          getChannel().newCall(METHOD_BATCH_READ_BLOBS, getCallOptions()), request);
    }
  }

  private static final int METHODID_FIND_MISSING_BLOBS = 0;
  private static final int METHODID_BATCH_UPDATE_BLOBS = 1;
  private static final int METHODID_BATCH_READ_BLOBS = 2;
  private static final int METHODID_GET_TREE = 3;

  private static class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final ContentAddressableStorageImplBase serviceImpl;
    private final int methodId;

    public MethodHandlers(ContentAddressableStorageImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_FIND_MISSING_BLOBS:
          serviceImpl.findMissingBlobs((build.bazel.remote.execution.v2.FindMissingBlobsRequest) request,
              (io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.FindMissingBlobsResponse>) responseObserver);
          break;
        case METHODID_BATCH_UPDATE_BLOBS:
          serviceImpl.batchUpdateBlobs((build.bazel.remote.execution.v2.BatchUpdateBlobsRequest) request,
              (io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.BatchUpdateBlobsResponse>) responseObserver);
          break;
        case METHODID_BATCH_READ_BLOBS:
          serviceImpl.batchReadBlobs((build.bazel.remote.execution.v2.BatchReadBlobsRequest) request,
              (io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.BatchReadBlobsResponse>) responseObserver);
          break;
        case METHODID_GET_TREE:
          serviceImpl.getTree((build.bazel.remote.execution.v2.GetTreeRequest) request,
              (io.grpc.stub.StreamObserver<build.bazel.remote.execution.v2.GetTreeResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    return new io.grpc.ServiceDescriptor(SERVICE_NAME,
        METHOD_FIND_MISSING_BLOBS,
        METHOD_BATCH_UPDATE_BLOBS,
        METHOD_BATCH_READ_BLOBS,
        METHOD_GET_TREE);
  }

}
